{
	"info": {
		"_postman_id": "3623ca2f-746d-43b6-8fc1-7698c45d3004",
		"name": "Idempotency Order Creation OTUS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1) создать пользователя в сервисе Биллинг",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"test_username\", pm.variables.replaceIn('{{$randomUserName}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUri}}/api/v1/identity/user/registration",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"api",
						"v1",
						"identity",
						"user",
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "2) Добавить деньги со счета клиента",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code must be 201\", () => {",
							"    pm.response.to.have.status(201);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.success).to.eql(true);",
							"    pm.expect(responseJson.message).is.string;",
							"});",
							"",
							"console.log(pm.request.body.raw);",
							"console.log(pm.response.json());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"amount\": {{test_amount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUri}}/api/v1/billing/account/:username/increase/",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"api",
						"v1",
						"billing",
						"account",
						":username",
						"increase",
						""
					],
					"variable": [
						{
							"key": "username",
							"value": "{{test_username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3) Создаем заказ, на который хватает денег",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code must be 202\", () => {",
							"    pm.response.to.have.status(202);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.success).to.eql(true);",
							"    pm.expect(responseJson.message).is.string;",
							"});",
							"",
							"console.log(pm.request.body.raw);",
							"console.log(pm.response.json());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"amount\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUri}}/api/v1/order/create",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"api",
						"v1",
						"order",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "4) Проверяем положительный остаток счета",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code must be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.success).to.eql(true);",
							"    pm.expect(responseJson.message).not.to.be.null;",
							"    pm.collectionVariables.set(\"test_amount\", parseFloat(responseJson.message));",
							"});",
							"console.log(pm.request.body.raw);",
							"console.log(pm.response.json());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUri}}/api/v1/billing/account/:username/status/",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"api",
						"v1",
						"billing",
						"account",
						":username",
						"status",
						""
					],
					"variable": [
						{
							"key": "username",
							"value": "{{test_username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5) Проверяем уведомления в сервисе нотификаций",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code must be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.success).to.eql(true);",
							"    pm.expect(responseJson.message).not.to.be.null;",
							"   ",
							"   var data = pm.response.json().message;",
							"",
							"    pm.collectionVariables.set(\"messages\", data.split(',').length);",
							"});",
							"",
							"console.log(pm.request.body.raw);",
							"console.log(pm.response.json());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUri}}/api/v1/notifications/getAll",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"api",
						"v1",
						"notifications",
						"getAll"
					]
				}
			},
			"response": []
		},
		{
			"name": "3) Создаем дублирующий заказ, на который хватает денег (копия)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code must be 202\", () => {",
							"    pm.response.to.have.status(202);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.success).to.eql(false);",
							"    pm.expect(responseJson.status).to.eql(409);",
							"    pm.expect(responseJson.message).is.string;",
							"});",
							"",
							"console.log(pm.request.body.raw);",
							"console.log(pm.response.json());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"amount\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUri}}/api/v1/order/create",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"api",
						"v1",
						"order",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "4) Проверяем, что счет не поменялся",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code must be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.success).to.eql(true);",
							"    pm.expect(responseJson.message).not.to.be.null;",
							"    pm.collectionVariables.set(\"test_amount\", parseFloat(responseJson.message));",
							"});",
							"console.log(pm.request.body.raw);",
							"console.log(pm.response.json());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUri}}/api/v1/billing/account/:username/status/",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"api",
						"v1",
						"billing",
						"account",
						":username",
						"status",
						""
					],
					"variable": [
						{
							"key": "username",
							"value": "{{test_username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5) Проверяем, что было отправлено уведомление в сервисе нотификаций о дублирующем создании заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code must be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.success).to.eql(true);",
							"    pm.expect(responseJson.message).not.to.be.null;",
							"   ",
							"   var data = pm.response.json().message;",
							"",
							"    pm.collectionVariables.set(\"messages\", data.split(',').length);",
							"});",
							"",
							"console.log(pm.request.body.raw);",
							"console.log(pm.response.json());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUri}}/api/v1/notifications/getAll",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"api",
						"v1",
						"notifications",
						"getAll"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUri",
			"value": "http://arch.homework",
			"type": "string"
		},
		{
			"key": "test_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_amount",
			"value": "{{amount}}",
			"type": "string"
		},
		{
			"key": "amount",
			"value": "\"-100.0\"",
			"type": "string"
		},
		{
			"key": "messages",
			"value": "",
			"type": "string"
		}
	]
}